State 34 conflicts: 1 shift/reduce
State 44 conflicts: 2 shift/reduce
State 56 conflicts: 1 shift/reduce
State 59 conflicts: 1 shift/reduce
State 73 conflicts: 1 shift/reduce
State 77 conflicts: 1 shift/reduce
State 82 conflicts: 1 shift/reduce
State 83 conflicts: 1 shift/reduce
State 99 conflicts: 1 shift/reduce
State 117 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: %empty
    2        | function program

    3 function: FUNCTION IDENTIFIER SEMICOLON BEGINPARAMS declaration_loop ENDPARAMS BEGINLOCALS declaration_loop ENDLOCALS BEGINBODY statement_loop ENDBODY

    4 declaration_loop: %empty
    5                 | declaration SEMICOLON declaration_loop

    6 declaration: id_loop COLON INTEGER
    7            | id_loop COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER

    8 id_loop: IDENTIFIER
    9        | IDENTIFIER COMMA id_loop

   10 statement: var ASSIGN expression
   11          | IF bool_expr THEN statement_loop ENDIF
   12          | IF bool_expr THEN statement_loop ELSE statement_loop ENDIF
   13          | WHILE bool_expr BEGINLOOP statement_loop ENDLOOP
   14          | DO BEGINLOOP statement_loop ENDLOOP WHILE bool_expr
   15          | READ var_loop
   16          | WRITE var_loop
   17          | CONTINUE
   18          | RETURN expression

   19 statement_loop: statement SEMICOLON
   20               | statement SEMICOLON statement_loop

   21 var_loop: var
   22         | var COMMA var_loop

   23 bool_expr: relation_and_expr rel_and_expr_loop

   24 rel_and_expr_loop: %empty
   25                  | OR relation_and_expr rel_and_expr_loop

   26 relation_and_expr: relation_expr relation_expr_loop

   27 relation_expr_loop: %empty
   28                   | AND relation_expr relation_expr_loop

   29 relation_expr: not_optional expression comp expression
   30              | not_optional TRUE
   31              | not_optional FALSE
   32              | not_optional L_PAREN bool_expr R_PAREN

   33 not_optional: %empty
   34             | NOT

   35 comp: EQ
   36     | NEQ
   37     | LT
   38     | GT
   39     | LTE
   40     | GTE

   41 expression: multiplicative_expr mulexpr_loop

   42 mulexpr_loop: %empty
   43             | add_op multiplicative_expr mulexpr_loop

   44 add_op: ADD
   45       | SUB

   46 multiplicative_expr: term term_loop

   47 term_loop: %empty
   48          | mul_op term term_loop

   49 mul_op: MULT
   50       | DIV
   51       | MOD

   52 term: sign_optional var
   53     | sign_optional NUMBER
   54     | sign_optional L_PAREN expression R_PAREN
   55     | IDENTIFIER L_PAREN expression_loop R_PAREN

   56 sign_optional: %empty
   57              | SUB

   58 expression_loop: %empty
   59                | expression
   60                | expression COMMA expression_loop

   61 var: IDENTIFIER
   62    | IDENTIFIER L_SQUARE_BRACKET expression R_SQUARE_BRACKET


Terminals, with rules where they appear

$end (0) 0
error (256)
FUNCTION (258) 3
BEGINPARAMS (259) 3
ENDPARAMS (260) 3
BEGINLOCALS (261) 3
ENDLOCALS (262) 3
BEGINBODY (263) 3
ENDBODY (264) 3
INTEGER (265) 6 7
ARRAY (266) 7
OF (267) 7
IF (268) 11 12
THEN (269) 11 12
ENDIF (270) 11 12
ELSE (271) 12
WHILE (272) 13 14
DO (273) 14
BEGINLOOP (274) 13 14
ENDLOOP (275) 13 14
CONTINUE (276) 17
READ (277) 15
WRITE (278) 16
AND (279) 28
OR (280) 25
NOT (281) 34
TRUE (282) 30
FALSE (283) 31
RETURN (284) 18
ADD (285) 44
SUB (286) 45 57
MULT (287) 49
DIV (288) 50
MOD (289) 51
EQ (290) 35
NEQ (291) 36
LT (292) 37
GT (293) 38
LTE (294) 39
GTE (295) 40
SEMICOLON (296) 3 5 19 20
COLON (297) 6 7
COMMA (298) 9 22 60
L_PAREN (299) 32 54 55
R_PAREN (300) 32 54 55
L_SQUARE_BRACKET (301) 7 62
R_SQUARE_BRACKET (302) 7 62
ASSIGN (303) 10
IDENTIFIER (304) 3 8 9 55 61 62
NUMBER (305) 7 53


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
program (52)
    on left: 1 2, on right: 0 2
function (53)
    on left: 3, on right: 2
declaration_loop (54)
    on left: 4 5, on right: 3 5
declaration (55)
    on left: 6 7, on right: 5
id_loop (56)
    on left: 8 9, on right: 6 7 9
statement (57)
    on left: 10 11 12 13 14 15 16 17 18, on right: 19 20
statement_loop (58)
    on left: 19 20, on right: 3 11 12 13 14 20
var_loop (59)
    on left: 21 22, on right: 15 16 22
bool_expr (60)
    on left: 23, on right: 11 12 13 14 32
rel_and_expr_loop (61)
    on left: 24 25, on right: 23 25
relation_and_expr (62)
    on left: 26, on right: 23 25
relation_expr_loop (63)
    on left: 27 28, on right: 26 28
relation_expr (64)
    on left: 29 30 31 32, on right: 26 28
not_optional (65)
    on left: 33 34, on right: 29 30 31 32
comp (66)
    on left: 35 36 37 38 39 40, on right: 29
expression (67)
    on left: 41, on right: 10 18 29 54 59 60 62
mulexpr_loop (68)
    on left: 42 43, on right: 41 43
add_op (69)
    on left: 44 45, on right: 43
multiplicative_expr (70)
    on left: 46, on right: 41 43
term_loop (71)
    on left: 47 48, on right: 46 48
mul_op (72)
    on left: 49 50 51, on right: 48
term (73)
    on left: 52 53 54 55, on right: 46 48
sign_optional (74)
    on left: 56 57, on right: 52 53 54
expression_loop (75)
    on left: 58 59 60, on right: 55 60
var (76)
    on left: 61 62, on right: 10 21 22 52


State 0

    0 $accept: . program $end

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 1 (program)

    program   go to state 2
    function  go to state 3


State 1

    3 function: FUNCTION . IDENTIFIER SEMICOLON BEGINPARAMS declaration_loop ENDPARAMS BEGINLOCALS declaration_loop ENDLOCALS BEGINBODY statement_loop ENDBODY

    IDENTIFIER  shift, and go to state 4


State 2

    0 $accept: program . $end

    $end  shift, and go to state 5


State 3

    2 program: function . program

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 1 (program)

    program   go to state 6
    function  go to state 3


State 4

    3 function: FUNCTION IDENTIFIER . SEMICOLON BEGINPARAMS declaration_loop ENDPARAMS BEGINLOCALS declaration_loop ENDLOCALS BEGINBODY statement_loop ENDBODY

    SEMICOLON  shift, and go to state 7


State 5

    0 $accept: program $end .

    $default  accept


State 6

    2 program: function program .

    $default  reduce using rule 2 (program)


State 7

    3 function: FUNCTION IDENTIFIER SEMICOLON . BEGINPARAMS declaration_loop ENDPARAMS BEGINLOCALS declaration_loop ENDLOCALS BEGINBODY statement_loop ENDBODY

    BEGINPARAMS  shift, and go to state 8


State 8

    3 function: FUNCTION IDENTIFIER SEMICOLON BEGINPARAMS . declaration_loop ENDPARAMS BEGINLOCALS declaration_loop ENDLOCALS BEGINBODY statement_loop ENDBODY

    IDENTIFIER  shift, and go to state 9

    $default  reduce using rule 4 (declaration_loop)

    declaration_loop  go to state 10
    declaration       go to state 11
    id_loop           go to state 12


State 9

    8 id_loop: IDENTIFIER .
    9        | IDENTIFIER . COMMA id_loop

    COMMA  shift, and go to state 13

    $default  reduce using rule 8 (id_loop)


State 10

    3 function: FUNCTION IDENTIFIER SEMICOLON BEGINPARAMS declaration_loop . ENDPARAMS BEGINLOCALS declaration_loop ENDLOCALS BEGINBODY statement_loop ENDBODY

    ENDPARAMS  shift, and go to state 14


State 11

    5 declaration_loop: declaration . SEMICOLON declaration_loop

    SEMICOLON  shift, and go to state 15


State 12

    6 declaration: id_loop . COLON INTEGER
    7            | id_loop . COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER

    COLON  shift, and go to state 16


State 13

    9 id_loop: IDENTIFIER COMMA . id_loop

    IDENTIFIER  shift, and go to state 9

    id_loop  go to state 17


State 14

    3 function: FUNCTION IDENTIFIER SEMICOLON BEGINPARAMS declaration_loop ENDPARAMS . BEGINLOCALS declaration_loop ENDLOCALS BEGINBODY statement_loop ENDBODY

    BEGINLOCALS  shift, and go to state 18


State 15

    5 declaration_loop: declaration SEMICOLON . declaration_loop

    IDENTIFIER  shift, and go to state 9

    $default  reduce using rule 4 (declaration_loop)

    declaration_loop  go to state 19
    declaration       go to state 11
    id_loop           go to state 12


State 16

    6 declaration: id_loop COLON . INTEGER
    7            | id_loop COLON . ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER

    INTEGER  shift, and go to state 20
    ARRAY    shift, and go to state 21


State 17

    9 id_loop: IDENTIFIER COMMA id_loop .

    $default  reduce using rule 9 (id_loop)


State 18

    3 function: FUNCTION IDENTIFIER SEMICOLON BEGINPARAMS declaration_loop ENDPARAMS BEGINLOCALS . declaration_loop ENDLOCALS BEGINBODY statement_loop ENDBODY

    IDENTIFIER  shift, and go to state 9

    $default  reduce using rule 4 (declaration_loop)

    declaration_loop  go to state 22
    declaration       go to state 11
    id_loop           go to state 12


State 19

    5 declaration_loop: declaration SEMICOLON declaration_loop .

    $default  reduce using rule 5 (declaration_loop)


State 20

    6 declaration: id_loop COLON INTEGER .

    $default  reduce using rule 6 (declaration)


State 21

    7 declaration: id_loop COLON ARRAY . L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER

    L_SQUARE_BRACKET  shift, and go to state 23


State 22

    3 function: FUNCTION IDENTIFIER SEMICOLON BEGINPARAMS declaration_loop ENDPARAMS BEGINLOCALS declaration_loop . ENDLOCALS BEGINBODY statement_loop ENDBODY

    ENDLOCALS  shift, and go to state 24


State 23

    7 declaration: id_loop COLON ARRAY L_SQUARE_BRACKET . NUMBER R_SQUARE_BRACKET OF INTEGER

    NUMBER  shift, and go to state 25


State 24

    3 function: FUNCTION IDENTIFIER SEMICOLON BEGINPARAMS declaration_loop ENDPARAMS BEGINLOCALS declaration_loop ENDLOCALS . BEGINBODY statement_loop ENDBODY

    BEGINBODY  shift, and go to state 26


State 25

    7 declaration: id_loop COLON ARRAY L_SQUARE_BRACKET NUMBER . R_SQUARE_BRACKET OF INTEGER

    R_SQUARE_BRACKET  shift, and go to state 27


State 26

    3 function: FUNCTION IDENTIFIER SEMICOLON BEGINPARAMS declaration_loop ENDPARAMS BEGINLOCALS declaration_loop ENDLOCALS BEGINBODY . statement_loop ENDBODY

    IF          shift, and go to state 28
    WHILE       shift, and go to state 29
    DO          shift, and go to state 30
    CONTINUE    shift, and go to state 31
    READ        shift, and go to state 32
    WRITE       shift, and go to state 33
    RETURN      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    statement       go to state 36
    statement_loop  go to state 37
    var             go to state 38


State 27

    7 declaration: id_loop COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET . OF INTEGER

    OF  shift, and go to state 39


State 28

   11 statement: IF . bool_expr THEN statement_loop ENDIF
   12          | IF . bool_expr THEN statement_loop ELSE statement_loop ENDIF

    NOT  shift, and go to state 40

    $default  reduce using rule 33 (not_optional)

    bool_expr          go to state 41
    relation_and_expr  go to state 42
    relation_expr      go to state 43
    not_optional       go to state 44


State 29

   13 statement: WHILE . bool_expr BEGINLOOP statement_loop ENDLOOP

    NOT  shift, and go to state 40

    $default  reduce using rule 33 (not_optional)

    bool_expr          go to state 45
    relation_and_expr  go to state 42
    relation_expr      go to state 43
    not_optional       go to state 44


State 30

   14 statement: DO . BEGINLOOP statement_loop ENDLOOP WHILE bool_expr

    BEGINLOOP  shift, and go to state 46


State 31

   17 statement: CONTINUE .

    $default  reduce using rule 17 (statement)


State 32

   15 statement: READ . var_loop

    IDENTIFIER  shift, and go to state 35

    var_loop  go to state 47
    var       go to state 48


State 33

   16 statement: WRITE . var_loop

    IDENTIFIER  shift, and go to state 35

    var_loop  go to state 49
    var       go to state 48


State 34

   18 statement: RETURN . expression

    SUB         shift, and go to state 50
    IDENTIFIER  shift, and go to state 51

    IDENTIFIER  [reduce using rule 56 (sign_optional)]
    $default    reduce using rule 56 (sign_optional)

    expression           go to state 52
    multiplicative_expr  go to state 53
    term                 go to state 54
    sign_optional        go to state 55


State 35

   61 var: IDENTIFIER .
   62    | IDENTIFIER . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    L_SQUARE_BRACKET  shift, and go to state 56

    $default  reduce using rule 61 (var)


State 36

   19 statement_loop: statement . SEMICOLON
   20               | statement . SEMICOLON statement_loop

    SEMICOLON  shift, and go to state 57


State 37

    3 function: FUNCTION IDENTIFIER SEMICOLON BEGINPARAMS declaration_loop ENDPARAMS BEGINLOCALS declaration_loop ENDLOCALS BEGINBODY statement_loop . ENDBODY

    ENDBODY  shift, and go to state 58


State 38

   10 statement: var . ASSIGN expression

    ASSIGN  shift, and go to state 59


State 39

    7 declaration: id_loop COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF . INTEGER

    INTEGER  shift, and go to state 60


State 40

   34 not_optional: NOT .

    $default  reduce using rule 34 (not_optional)


State 41

   11 statement: IF bool_expr . THEN statement_loop ENDIF
   12          | IF bool_expr . THEN statement_loop ELSE statement_loop ENDIF

    THEN  shift, and go to state 61


State 42

   23 bool_expr: relation_and_expr . rel_and_expr_loop

    OR  shift, and go to state 62

    $default  reduce using rule 24 (rel_and_expr_loop)

    rel_and_expr_loop  go to state 63


State 43

   26 relation_and_expr: relation_expr . relation_expr_loop

    AND  shift, and go to state 64

    $default  reduce using rule 27 (relation_expr_loop)

    relation_expr_loop  go to state 65


State 44

   29 relation_expr: not_optional . expression comp expression
   30              | not_optional . TRUE
   31              | not_optional . FALSE
   32              | not_optional . L_PAREN bool_expr R_PAREN

    TRUE        shift, and go to state 66
    FALSE       shift, and go to state 67
    SUB         shift, and go to state 50
    L_PAREN     shift, and go to state 68
    IDENTIFIER  shift, and go to state 51

    L_PAREN     [reduce using rule 56 (sign_optional)]
    IDENTIFIER  [reduce using rule 56 (sign_optional)]
    $default    reduce using rule 56 (sign_optional)

    expression           go to state 69
    multiplicative_expr  go to state 53
    term                 go to state 54
    sign_optional        go to state 55


State 45

   13 statement: WHILE bool_expr . BEGINLOOP statement_loop ENDLOOP

    BEGINLOOP  shift, and go to state 70


State 46

   14 statement: DO BEGINLOOP . statement_loop ENDLOOP WHILE bool_expr

    IF          shift, and go to state 28
    WHILE       shift, and go to state 29
    DO          shift, and go to state 30
    CONTINUE    shift, and go to state 31
    READ        shift, and go to state 32
    WRITE       shift, and go to state 33
    RETURN      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    statement       go to state 36
    statement_loop  go to state 71
    var             go to state 38


State 47

   15 statement: READ var_loop .

    $default  reduce using rule 15 (statement)


State 48

   21 var_loop: var .
   22         | var . COMMA var_loop

    COMMA  shift, and go to state 72

    $default  reduce using rule 21 (var_loop)


State 49

   16 statement: WRITE var_loop .

    $default  reduce using rule 16 (statement)


State 50

   57 sign_optional: SUB .

    $default  reduce using rule 57 (sign_optional)


State 51

   55 term: IDENTIFIER . L_PAREN expression_loop R_PAREN

    L_PAREN  shift, and go to state 73


State 52

   18 statement: RETURN expression .

    $default  reduce using rule 18 (statement)


State 53

   41 expression: multiplicative_expr . mulexpr_loop

    ADD  shift, and go to state 74
    SUB  shift, and go to state 75

    $default  reduce using rule 42 (mulexpr_loop)

    mulexpr_loop  go to state 76
    add_op        go to state 77


State 54

   46 multiplicative_expr: term . term_loop

    MULT  shift, and go to state 78
    DIV   shift, and go to state 79
    MOD   shift, and go to state 80

    $default  reduce using rule 47 (term_loop)

    term_loop  go to state 81
    mul_op     go to state 82


State 55

   52 term: sign_optional . var
   53     | sign_optional . NUMBER
   54     | sign_optional . L_PAREN expression R_PAREN

    L_PAREN     shift, and go to state 83
    IDENTIFIER  shift, and go to state 35
    NUMBER      shift, and go to state 84

    var  go to state 85


State 56

   62 var: IDENTIFIER L_SQUARE_BRACKET . expression R_SQUARE_BRACKET

    SUB         shift, and go to state 50
    IDENTIFIER  shift, and go to state 51

    IDENTIFIER  [reduce using rule 56 (sign_optional)]
    $default    reduce using rule 56 (sign_optional)

    expression           go to state 86
    multiplicative_expr  go to state 53
    term                 go to state 54
    sign_optional        go to state 55


State 57

   19 statement_loop: statement SEMICOLON .
   20               | statement SEMICOLON . statement_loop

    IF          shift, and go to state 28
    WHILE       shift, and go to state 29
    DO          shift, and go to state 30
    CONTINUE    shift, and go to state 31
    READ        shift, and go to state 32
    WRITE       shift, and go to state 33
    RETURN      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    $default  reduce using rule 19 (statement_loop)

    statement       go to state 36
    statement_loop  go to state 87
    var             go to state 38


State 58

    3 function: FUNCTION IDENTIFIER SEMICOLON BEGINPARAMS declaration_loop ENDPARAMS BEGINLOCALS declaration_loop ENDLOCALS BEGINBODY statement_loop ENDBODY .

    $default  reduce using rule 3 (function)


State 59

   10 statement: var ASSIGN . expression

    SUB         shift, and go to state 50
    IDENTIFIER  shift, and go to state 51

    IDENTIFIER  [reduce using rule 56 (sign_optional)]
    $default    reduce using rule 56 (sign_optional)

    expression           go to state 88
    multiplicative_expr  go to state 53
    term                 go to state 54
    sign_optional        go to state 55


State 60

    7 declaration: id_loop COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER .

    $default  reduce using rule 7 (declaration)


State 61

   11 statement: IF bool_expr THEN . statement_loop ENDIF
   12          | IF bool_expr THEN . statement_loop ELSE statement_loop ENDIF

    IF          shift, and go to state 28
    WHILE       shift, and go to state 29
    DO          shift, and go to state 30
    CONTINUE    shift, and go to state 31
    READ        shift, and go to state 32
    WRITE       shift, and go to state 33
    RETURN      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    statement       go to state 36
    statement_loop  go to state 89
    var             go to state 38


State 62

   25 rel_and_expr_loop: OR . relation_and_expr rel_and_expr_loop

    NOT  shift, and go to state 40

    $default  reduce using rule 33 (not_optional)

    relation_and_expr  go to state 90
    relation_expr      go to state 43
    not_optional       go to state 44


State 63

   23 bool_expr: relation_and_expr rel_and_expr_loop .

    $default  reduce using rule 23 (bool_expr)


State 64

   28 relation_expr_loop: AND . relation_expr relation_expr_loop

    NOT  shift, and go to state 40

    $default  reduce using rule 33 (not_optional)

    relation_expr  go to state 91
    not_optional   go to state 44


State 65

   26 relation_and_expr: relation_expr relation_expr_loop .

    $default  reduce using rule 26 (relation_and_expr)


State 66

   30 relation_expr: not_optional TRUE .

    $default  reduce using rule 30 (relation_expr)


State 67

   31 relation_expr: not_optional FALSE .

    $default  reduce using rule 31 (relation_expr)


State 68

   32 relation_expr: not_optional L_PAREN . bool_expr R_PAREN

    NOT  shift, and go to state 40

    $default  reduce using rule 33 (not_optional)

    bool_expr          go to state 92
    relation_and_expr  go to state 42
    relation_expr      go to state 43
    not_optional       go to state 44


State 69

   29 relation_expr: not_optional expression . comp expression

    EQ   shift, and go to state 93
    NEQ  shift, and go to state 94
    LT   shift, and go to state 95
    GT   shift, and go to state 96
    LTE  shift, and go to state 97
    GTE  shift, and go to state 98

    comp  go to state 99


State 70

   13 statement: WHILE bool_expr BEGINLOOP . statement_loop ENDLOOP

    IF          shift, and go to state 28
    WHILE       shift, and go to state 29
    DO          shift, and go to state 30
    CONTINUE    shift, and go to state 31
    READ        shift, and go to state 32
    WRITE       shift, and go to state 33
    RETURN      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    statement       go to state 36
    statement_loop  go to state 100
    var             go to state 38


State 71

   14 statement: DO BEGINLOOP statement_loop . ENDLOOP WHILE bool_expr

    ENDLOOP  shift, and go to state 101


State 72

   22 var_loop: var COMMA . var_loop

    IDENTIFIER  shift, and go to state 35

    var_loop  go to state 102
    var       go to state 48


State 73

   55 term: IDENTIFIER L_PAREN . expression_loop R_PAREN

    SUB         shift, and go to state 50
    IDENTIFIER  shift, and go to state 51

    R_PAREN     reduce using rule 58 (expression_loop)
    IDENTIFIER  [reduce using rule 56 (sign_optional)]
    $default    reduce using rule 56 (sign_optional)

    expression           go to state 103
    multiplicative_expr  go to state 53
    term                 go to state 54
    sign_optional        go to state 55
    expression_loop      go to state 104


State 74

   44 add_op: ADD .

    $default  reduce using rule 44 (add_op)


State 75

   45 add_op: SUB .

    $default  reduce using rule 45 (add_op)


State 76

   41 expression: multiplicative_expr mulexpr_loop .

    $default  reduce using rule 41 (expression)


State 77

   43 mulexpr_loop: add_op . multiplicative_expr mulexpr_loop

    SUB         shift, and go to state 50
    IDENTIFIER  shift, and go to state 51

    IDENTIFIER  [reduce using rule 56 (sign_optional)]
    $default    reduce using rule 56 (sign_optional)

    multiplicative_expr  go to state 105
    term                 go to state 54
    sign_optional        go to state 55


State 78

   49 mul_op: MULT .

    $default  reduce using rule 49 (mul_op)


State 79

   50 mul_op: DIV .

    $default  reduce using rule 50 (mul_op)


State 80

   51 mul_op: MOD .

    $default  reduce using rule 51 (mul_op)


State 81

   46 multiplicative_expr: term term_loop .

    $default  reduce using rule 46 (multiplicative_expr)


State 82

   48 term_loop: mul_op . term term_loop

    SUB         shift, and go to state 50
    IDENTIFIER  shift, and go to state 51

    IDENTIFIER  [reduce using rule 56 (sign_optional)]
    $default    reduce using rule 56 (sign_optional)

    term           go to state 106
    sign_optional  go to state 55


State 83

   54 term: sign_optional L_PAREN . expression R_PAREN

    SUB         shift, and go to state 50
    IDENTIFIER  shift, and go to state 51

    IDENTIFIER  [reduce using rule 56 (sign_optional)]
    $default    reduce using rule 56 (sign_optional)

    expression           go to state 107
    multiplicative_expr  go to state 53
    term                 go to state 54
    sign_optional        go to state 55


State 84

   53 term: sign_optional NUMBER .

    $default  reduce using rule 53 (term)


State 85

   52 term: sign_optional var .

    $default  reduce using rule 52 (term)


State 86

   62 var: IDENTIFIER L_SQUARE_BRACKET expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET  shift, and go to state 108


State 87

   20 statement_loop: statement SEMICOLON statement_loop .

    $default  reduce using rule 20 (statement_loop)


State 88

   10 statement: var ASSIGN expression .

    $default  reduce using rule 10 (statement)


State 89

   11 statement: IF bool_expr THEN statement_loop . ENDIF
   12          | IF bool_expr THEN statement_loop . ELSE statement_loop ENDIF

    ENDIF  shift, and go to state 109
    ELSE   shift, and go to state 110


State 90

   25 rel_and_expr_loop: OR relation_and_expr . rel_and_expr_loop

    OR  shift, and go to state 62

    $default  reduce using rule 24 (rel_and_expr_loop)

    rel_and_expr_loop  go to state 111


State 91

   28 relation_expr_loop: AND relation_expr . relation_expr_loop

    AND  shift, and go to state 64

    $default  reduce using rule 27 (relation_expr_loop)

    relation_expr_loop  go to state 112


State 92

   32 relation_expr: not_optional L_PAREN bool_expr . R_PAREN

    R_PAREN  shift, and go to state 113


State 93

   35 comp: EQ .

    $default  reduce using rule 35 (comp)


State 94

   36 comp: NEQ .

    $default  reduce using rule 36 (comp)


State 95

   37 comp: LT .

    $default  reduce using rule 37 (comp)


State 96

   38 comp: GT .

    $default  reduce using rule 38 (comp)


State 97

   39 comp: LTE .

    $default  reduce using rule 39 (comp)


State 98

   40 comp: GTE .

    $default  reduce using rule 40 (comp)


State 99

   29 relation_expr: not_optional expression comp . expression

    SUB         shift, and go to state 50
    IDENTIFIER  shift, and go to state 51

    IDENTIFIER  [reduce using rule 56 (sign_optional)]
    $default    reduce using rule 56 (sign_optional)

    expression           go to state 114
    multiplicative_expr  go to state 53
    term                 go to state 54
    sign_optional        go to state 55


State 100

   13 statement: WHILE bool_expr BEGINLOOP statement_loop . ENDLOOP

    ENDLOOP  shift, and go to state 115


State 101

   14 statement: DO BEGINLOOP statement_loop ENDLOOP . WHILE bool_expr

    WHILE  shift, and go to state 116


State 102

   22 var_loop: var COMMA var_loop .

    $default  reduce using rule 22 (var_loop)


State 103

   59 expression_loop: expression .
   60                | expression . COMMA expression_loop

    COMMA  shift, and go to state 117

    $default  reduce using rule 59 (expression_loop)


State 104

   55 term: IDENTIFIER L_PAREN expression_loop . R_PAREN

    R_PAREN  shift, and go to state 118


State 105

   43 mulexpr_loop: add_op multiplicative_expr . mulexpr_loop

    ADD  shift, and go to state 74
    SUB  shift, and go to state 75

    $default  reduce using rule 42 (mulexpr_loop)

    mulexpr_loop  go to state 119
    add_op        go to state 77


State 106

   48 term_loop: mul_op term . term_loop

    MULT  shift, and go to state 78
    DIV   shift, and go to state 79
    MOD   shift, and go to state 80

    $default  reduce using rule 47 (term_loop)

    term_loop  go to state 120
    mul_op     go to state 82


State 107

   54 term: sign_optional L_PAREN expression . R_PAREN

    R_PAREN  shift, and go to state 121


State 108

   62 var: IDENTIFIER L_SQUARE_BRACKET expression R_SQUARE_BRACKET .

    $default  reduce using rule 62 (var)


State 109

   11 statement: IF bool_expr THEN statement_loop ENDIF .

    $default  reduce using rule 11 (statement)


State 110

   12 statement: IF bool_expr THEN statement_loop ELSE . statement_loop ENDIF

    IF          shift, and go to state 28
    WHILE       shift, and go to state 29
    DO          shift, and go to state 30
    CONTINUE    shift, and go to state 31
    READ        shift, and go to state 32
    WRITE       shift, and go to state 33
    RETURN      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    statement       go to state 36
    statement_loop  go to state 122
    var             go to state 38


State 111

   25 rel_and_expr_loop: OR relation_and_expr rel_and_expr_loop .

    $default  reduce using rule 25 (rel_and_expr_loop)


State 112

   28 relation_expr_loop: AND relation_expr relation_expr_loop .

    $default  reduce using rule 28 (relation_expr_loop)


State 113

   32 relation_expr: not_optional L_PAREN bool_expr R_PAREN .

    $default  reduce using rule 32 (relation_expr)


State 114

   29 relation_expr: not_optional expression comp expression .

    $default  reduce using rule 29 (relation_expr)


State 115

   13 statement: WHILE bool_expr BEGINLOOP statement_loop ENDLOOP .

    $default  reduce using rule 13 (statement)


State 116

   14 statement: DO BEGINLOOP statement_loop ENDLOOP WHILE . bool_expr

    NOT  shift, and go to state 40

    $default  reduce using rule 33 (not_optional)

    bool_expr          go to state 123
    relation_and_expr  go to state 42
    relation_expr      go to state 43
    not_optional       go to state 44


State 117

   60 expression_loop: expression COMMA . expression_loop

    SUB         shift, and go to state 50
    IDENTIFIER  shift, and go to state 51

    R_PAREN     reduce using rule 58 (expression_loop)
    IDENTIFIER  [reduce using rule 56 (sign_optional)]
    $default    reduce using rule 56 (sign_optional)

    expression           go to state 103
    multiplicative_expr  go to state 53
    term                 go to state 54
    sign_optional        go to state 55
    expression_loop      go to state 124


State 118

   55 term: IDENTIFIER L_PAREN expression_loop R_PAREN .

    $default  reduce using rule 55 (term)


State 119

   43 mulexpr_loop: add_op multiplicative_expr mulexpr_loop .

    $default  reduce using rule 43 (mulexpr_loop)


State 120

   48 term_loop: mul_op term term_loop .

    $default  reduce using rule 48 (term_loop)


State 121

   54 term: sign_optional L_PAREN expression R_PAREN .

    $default  reduce using rule 54 (term)


State 122

   12 statement: IF bool_expr THEN statement_loop ELSE statement_loop . ENDIF

    ENDIF  shift, and go to state 125


State 123

   14 statement: DO BEGINLOOP statement_loop ENDLOOP WHILE bool_expr .

    $default  reduce using rule 14 (statement)


State 124

   60 expression_loop: expression COMMA expression_loop .

    $default  reduce using rule 60 (expression_loop)


State 125

   12 statement: IF bool_expr THEN statement_loop ELSE statement_loop ENDIF .

    $default  reduce using rule 12 (statement)
